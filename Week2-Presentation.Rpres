Floodplain Forest Group: Progress Report, Week 2
========================================================
author: Sal Balkus, Noah Dean, Makayla McDevitt 
date: 6/12/20
autosize: true
css: Week2-Presentation.css
type: section


Summary of Project
========================================================
```{r, setup}
library(tidyverse)
library(gridExtra)
plots <- read_csv("clean_data/plots.csv")

```






Literature Review
========================================================







What we got out of the literature
========================================================







Data Cleaning
========================================================

- Several steps to cleaning the data

- General process:

  - Exlude sites not on the UMRS floodplain proper

  - Change species codes to match USACE system
  
  - Retain the relevent columns
  
  - Translate health codes to `D`, `V`. `S`, and `SD`
  
  - Remove unknown species
  
  - Remove entries with DBH of 0
  




Initial Questions: Unique species and abundance
========================================================

```{r echo = F, include = F}

knitr::opts_chunk$set(warning = F, error = F, message = F, echo = F, include = F)


library(tidyverse)
library(rlist)
library(gridExtra)

setwd("~/REU_2020/UWL-REU-FPF/clean_data")

df <- read_csv('UMRS_FPF_clean.csv')

species_count <- n_distinct(df$TR_SP)


# Changes theme to put title in center
theme_update(plot.title = element_text(hjust = 0.5), legend.position = 'none')

# Finds the counts of each species and arranges it in descending order
counts <- df %>% count(TR_SP) %>% 
  arrange(desc(n))

# Creates a bar chart that shows the counts of the 5 most common species
count_plot <- counts[1:5, ] %>%  ggplot(aes(x = reorder(TR_SP,-n), y = n, fill = TR_SP)) + 
  geom_col() + 
  labs(title = 'Top 5 species', x = 'Species', y = 'Count') 

# Initializes lists that will be used to store the species and plots when do this by health class
health_plot_list <- list()
species_list <- list()

health_classes <- c('V', 'S', 'SD')
# Use the above health_class vector to iterate through each of the health classes in this for loop
for (i in 1:3){
  # Finds counts of each species in that health class then arranges it in descending order
  health_counts <- df %>% filter(TR_HLTH == health_classes[i]) %>% 
    count(TR_SP) %>% 
    arrange(desc(n))
  
  # Takes the top 5 species and appends it to the species list
  species_list <- species_list %>% list.append(health_counts$TR_SP[1:5])
  
  # Generates the plot title based on the health class
  plot_title <- paste('Top 5 species in',health_classes[i],'health class', sep = ' ')
  
  # Creates the plot of 5 most abundant species in that health class
  health_count_plot <- health_counts[1:5,] %>% ggplot(aes(x = reorder(TR_SP, -n), y = n, fill = TR_SP)) + 
    geom_col() + 
    labs(title = plot_title, x = 'Species', y = 'Count') + 
    theme(legend.position = "none")
  
  # Appends the plot to this list to easily store it
  health_plot_list <- health_plot_list %>% list.append(health_count_plot)
}

# New variable for the lists to make it easier to type out
hpl <- health_plot_list
sl <- species_list

# Generates a single plot that has all of the above four plots in it.
count_plot_all <- grid.arrange(count_plot, hpl[[1]], hpl[[2]], hpl[[3]])

species_dict = list(
  'ACNE2' = 'boxelder',
  'ACSA2' = 'silver maple',
  'BENI' = 'river birch',
  'CACO15' = 'bitternut hickory',
  'CEOC' = 'common hackberry',
  'FRNI' = 'black ash',
  'FRPE' = 'green ash',
  'JUNI' = 'black walnut',
  'PIRE' = 'red pine',
  'PODE3' = 'cottonwood',
  'PRSE3' = 'black cherry',
  'QUBI' = 'swamp white oak',
  'QUEL' = 'northern pin oak',
  'QUMA2' = 'bur oak',
  'QURU' = 'northern red oak',
  'QUVE' = 'black oak',
  'ROPS' = 'black locust',
  'SANI' = 'black willow',
  'TIAM' = 'american basswood',
  'ULAM' = 'american elm',
  'ACSA3' = 'sugar maple',
  'AEGL' = 'ohio buckeye',
  'BEPA' = 'white birch',
  'CAIL2' = 'northern pecan',
  'CALA21' = 'shellback hickory',
  'CAOV2' = 'shagbark hickory',
  'CARYA' = 'hickory spp.',
  'CAAL27' = 'mockernut hickory',
  'CABI8' = 'southern catalpa',
  'CASP8' = 'northern catalpa',
  'CELA' = 'sugarberry',
  'CECA4' = 'easturn redbud',
  'CRATA' = 'hawthorn spp.',
  'DIVI5' = 'common persimmon',
  'FRAM2' = 'white ash',
  'GLTR' = 'honey locust',
  'GYDI' = 'kentucky coffeetree',
  'JUCI' = 'butternut',
  'JUVI' = 'eastern redcedar',
  'LIST2' = 'sweetgum',
  'MAPO' = 'osage orange',
  'MOAL' = 'white mulberry',
  'MORU2' = 'red mulberry',
  'OSVI' = 'ironwood',
  'PIST' = 'eastern white pine',
  'PLOC' = 'sycamore',
  'POGR4' = 'bigtooth aspen',
  'POTR5' = 'quaking aspen',
  'QUAL' = 'white oak',
  'QULY' = 'overcup oak',
  'QUMU' = 'chinkapin oak',
  'QUPA2' = 'pin oak',
  'SAAM2' = 'peachleaf willow',
  'SALIX' = 'willow spp.',
  'TADI2' = 'bald cypress',
  'ULPU' = 'siberian elm',
  'ULRU' = 'red/slippery elm',
  'NONE' = 'none',
  'OTHER' = 'other',
  'SNAG' = 'snag',
  'UNKNOWN' = 'unknown',
  'ALIN2' = 'gray alder',
  'AMFR' = 'false indigobush',
  'CEOC2' = 'common buttonbush',
  'COAM2' = 'silky dogwood',
  'COFL2' = 'flowering dogwood',
  'CORA6' = 'gray dogwood',
  'COSE16' = 'redosier dogwood',
  'CORNU' = 'dogwood spp.',
  'FOAC' = 'swamp privet',
  'FRAL4' = 'glossy buckthorn',
  'ILDE' = 'possumhaw',
  'ILVE' = 'winterberry',
  'LOMA6' = 'amur honeysuckle',
  'LONICER' = 'honeysuckle',
  'PRVI' = 'chockecherry',
  'RHCA3' = 'buckthorn',
  'RHTY' = 'staghorn sumac',
  'SAIN3' = 'sandbar willow',
  'SAMBU' = 'elderberry',
  'STTR' = 'american bladdernut',
  'VILE' = 'nannyberry',
  'XAAM' = 'prickly ash',
  'CATO6' = 'mockernut hickory',
  'QUPA' = 'pin oak'
)

read_dict <- function(species){
  full_sp <- c()
  
  for (i in 1:length(species)){
    full_sp <- c(full_sp, species_dict[[species[i]]])
    if (i == length(species)){
      full_sp <- c(full_sp[-length(species)], paste('and', species_dict[[species[i]]]))
    }
  }
  return(full_sp)
}


ba_species <- df %>% group_by(TR_SP) %>% 
  summarise(TotBA = sum(BasalArea), .groups = 'keep') %>% 
  arrange(desc(TotBA))


overall_ba_plot <- ba_species[1:5, ] %>%  ggplot(aes(x = reorder(TR_SP,-TotBA), y = TotBA, fill = TR_SP)) +
  geom_col() +
  labs(title = 'Top Basal Areas', x = 'Species', y = 'Basal Area')

health_plot_list <- list()
species_list <- list()

health_classes <- c('V', 'S', 'SD')

for (i in 1:3){
  health_counts <- df %>% filter(TR_HLTH == health_classes[i]) %>% 
    group_by(TR_SP) %>% 
    summarise(n = sum(BasalArea), .groups = 'keep') %>% 
    arrange(desc(n))
  
  species_list <- species_list %>% list.append(health_counts$TR_SP[1:5])
  
  plot_title <- paste('Top Basal Areas in',health_classes[i],'health class', sep = ' ')
  
  health_count_plot <- health_counts[1:5,] %>% ggplot(aes(x = reorder(TR_SP, -n), y = n, fill = TR_SP)) + 
    geom_col() + 
    labs(title = plot_title, x = 'Species', y = 'Basal Area') + 
    theme(legend.position = "none")
  
  health_plot_list <- health_plot_list %>% list.append(health_count_plot)
}

bapl <- health_plot_list
sl_ba <- species_list


BA_plot_all <- grid.arrange(overall_ba_plot, bapl[[1]], bapl[[2]], bapl[[3]])

```

- `r species_count` distinct species were recorded

- The top five species by stem count were `r read_dict(counts$TR_SP[1:5])`

- The top five species by basal area were `r read_dict(ba_species$TR_SP[1:5])`

```{r include = T}
plot(count_plot_all)
```



Initial Questions: Rare species
========================================================

```{r}
# Rearranges the counts object to be in ascending order then the plot is the same as previously
rare_counts <- counts %>% arrange(n) 

rare_count_plot <- rare_counts[1:5,] %>% ggplot(aes(x = TR_SP, y = n, fill = TR_SP)) + 
  geom_col()

rare_count_plot

# Creates a table with the 5 rarest species and then selects the relavent columns (species, PID, TR_HLTH, BasalArea)
rare_species_tab <- df %>% filter(TR_SP %in% rare_counts$TR_SP[1:5])

rare_species_tab

rare_species_tab_clean <- rare_species_tab %>% select(TR_SP, PID, TR_HLTH, BasalArea) %>% 
  arrange(TR_SP)

colnames(rare_species_tab_clean) <- c('Species', 'Plot ID', 'TR_HLTH', 'Basal Area')

rare_species_tab_clean$Species <- species_dict[rare_species_tab_clean$Species]
rare_species_tab_clean
rare_species_tab_clean['Basal Area'] <- round(rare_species_tab_clean['Basal Area'], digits = 2)

```

- The 5 rarest species are `r read_dict(rare_counts$TR_SP[1:5])`


```{r include = T}
knitr::kable(rare_species_tab_clean)
```



Initial Questions: Pure plots
========================================================

```{r}
purity <- df %>% group_by(PID) %>% 
  summarize(unique_sp = length(unique(TR_SP))) %>% 
  group_by(unique_sp) %>% 
  summarize(count = length(PID))

purity

purity_tab <- tibble(present = c(1, 2), num <- purity$count[1:2], percent <- 100*round(num/sum(purity$count), digits = 4))

colnames(purity_tab) = c('Species present', 'Count', 'Percentage')
```

```{r include = T}
knitr::kable(purity_tab)
```

- In total, nearly 40% of the plots have less than 3 species

Initial Questions: Species uniqueness
========================================================

```{r}

# Groups the df by species and finds how many pools that species is located in
pools_with_species <- df %>% group_by(TR_SP) %>% 
  summarize(n_pools = length(unique(POOL)))

# Finds counts of how many species are in x number of pools
counts_of_pools <- pools_with_species %>% group_by(n_pools) %>% 
  summarize(count = length(TR_SP))

counts_of_pools

# next two objects are the same as above but with districts
dist_with_species <- df %>% group_by(TR_SP) %>% 
  summarize(n_dist = length(unique(District)))

counts_of_districts <- dist_with_species %>% group_by(n_dist) %>% 
  summarize(count = length(TR_SP))

counts_of_districts

# This just finds the specific pools that have a species unique to them
pool_uniques <- (pools_with_species %>% filter(n_pools == 1))$TR_SP
pools_with_uniques <- unique((df %>% filter(TR_SP %in% pool_uniques))$POOL)
  
dist_uniques <- (dist_with_species %>% filter(n_dist == 1))$TR_SP
dist_with_uniques <- unique((df %>% filter(TR_SP %in% dist_uniques))$District)


```


- `r counts_of_pools$count[1]` species are unique to a pool

- `r counts_of_districts$count[1]` species are unique to a district

- The pools with unique species are `r c(pools_with_uniques[-length(pools_with_uniques)], paste('and', pools_with_uniques[length(pools_with_uniques)]))`

- `r dist_with_uniques` is the only district that has unique species


Initial Questions: Snag distribution
========================================================

```{r}

# Finds the proportion of snags in each plot
snag_proportion <- df %>% group_by(PID) %>% 
  summarize(p = sum(TR_SP == 'SNAG')/length(TR_SP))

# Generates a histogram based on proportion of snags across all plots
snag_hist <- snag_proportion %>%  ggplot(aes(x = p)) + 
  geom_histogram() + 
  labs(title = 'Histogram of snag proportion in plots', x = 'Snag proportion', y = 'Count')

snag_hist

# Creates a list of plots that have only snags
all_snag_plots <- (snag_proportion %>% filter(p == 1))$PID

# Both of the next two objects get the counts of snags from each species.  It's separated into two separate lists where the total count is greater than 100 or less than 100.  This is purely to make plotting the data easier
snag_count_greater <- df %>% filter(TR_SP == 'SNAG') %>% 
  group_by(TR_SP2) %>% 
  summarize(count = length(TR_SP2)) %>% 
  filter(count >= 100)

snag_count_lesser <- df %>% filter(TR_SP == 'SNAG') %>% 
  group_by(TR_SP2) %>% 
  summarize(count = length(TR_SP2)) %>% 
  filter(count < 100)

# These two objects get the distribution of snag DBH for each species in their respective count classes
snag_DBH_greater <- df %>% filter(TR_SP == 'SNAG', TR_SP2 %in% snag_count_greater$TR_SP2) 

snag_DBH_lesser <- df %>% filter(TR_SP == 'SNAG', TR_SP2 %in% snag_count_lesser$TR_SP2) 

# Generates a histogram based on the DBH of snags for each species
snag_DBH_hist_greater <- snag_DBH_greater %>% ggplot(aes(x = TR_DIA)) +
  geom_histogram() + 
  ggtitle('Histogram of snag DBH when the total count is greater than 100') +
  facet_wrap(~TR_SP2) 
  
  
snag_DBH_hist_lesser <- snag_DBH_lesser %>% ggplot(aes(x = TR_DIA)) +
  geom_histogram() + 
  facet_wrap(~TR_SP2) + 
  ggtitle('Histogram of snag DBH when the total count is less than 100')

snag_DBH_hist_greater
snag_DBH_hist_lesser


```

```{r include = T}
plot(snag_hist)
```


Initial Questions: Snag distribution
========================================================

```{r include = T}
plot(snag_DBH_hist_greater)
```


Preparation for Analyzing by Plot
========================================================
- Function to filter out species that only appear in fewer than n plots
- Pivot table listing frequency, trees per acre, and relative trees per acre for each plot
  - dataset of plots, rather than trees; important for later
- Exploration of distributions for top 5 species:
  - Frequency and TPA very right-skewed with few high outliers; requires log-transform
  - Relative TPA [0-1] skewed either 0 or 1 (mostly 0)
  

ACSA2 Trees-per-acre distributions
========================================================

```{r, echo = FALSE}
plots <- read_csv("clean_data/plots.csv")


#By TPA
b <- ggplot(plots) + geom_boxplot(aes(x = log(ACSA2_TPA,10))) + xlab("log-transformed Trees Per Acre, Silver Maple") + theme_light()


#By relative TPA
c <- ggplot(plots) + geom_histogram(aes(x = ACSA2_rel_TPA), binwidth = 0.01) + xlab("Relative Trees Per Acre, Silver Maple") + theme_light()

grid.arrange(b,c)

```

  
Main Questions Raised
========================================================

To explore:
- Which species appear together, and in what quantities?
- How does basal area and health vary among species within plots?
- What transformations should be used to deal with outliers?

To ask:
- How ecologically important are unique species?
- In how many plots should a species be present to be considered in our further analysis?



What are our next steps?
========================================================

Our goal now is to develop a way to classify plots based on forest type.

Level 1: define plots based on dominant species
- simple rules-based formula
- dominance based on basal area and density

Level 2: define using multivariate analyses of level 1 classes
- multivariate analysis
- clustering



What are our next steps?
========================================================

Tasks:
- Use R to determine dominant species for each plot, or if plot is codominant/mixed
- For mixed plots, research ordination methods to use for mixed plot classification
- Research clustering methods to use for level 2 classification



References
========================================================

Cover Image: Forest Landscape Ecology of the Upper Mississippi River Floodplain, United States Geological Survey

Floodplain Forest Classification Overview (Van Appledorn)
